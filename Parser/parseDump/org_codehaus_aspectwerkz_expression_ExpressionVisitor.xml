<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTFieldPattern, java.lang.Object)</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.SimpleNode, java.lang.Object)</cmethod>
<cfield>m_expressionInfo</cfield>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTThis, java.lang.Object)</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTExpression, java.lang.Object)</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTStaticInitialization, java.lang.Object)</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTGet, java.lang.Object)</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTParameter, java.lang.Object)</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTExecution, java.lang.Object)</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTClassPattern, java.lang.Object)</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTArgs, java.lang.Object)</cmethod>
<cfield>m_expression</cfield>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTOr, java.lang.Object)</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTCall, java.lang.Object)</cmethod>
<cmethod>getExpressionInfo()</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTModifier, java.lang.Object)</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTNot, java.lang.Object)</cmethod>
<cmethod>matchUndeterministic(org.codehaus.aspectwerkz.expression.ExpressionContext)</cmethod>
<cmethod>visitModifiers(org.codehaus.aspectwerkz.expression.ast.SimpleNode, org.codehaus.aspectwerkz.reflect.ReflectionInfo)</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTAnd, java.lang.Object)</cmethod>
<cmethod>visitAnnotatedNode(org.codehaus.aspectwerkz.expression.ast.SimpleNode, org.codehaus.aspectwerkz.reflect.ReflectionInfo)</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTHasMethod, java.lang.Object)</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTAttribute, java.lang.Object)</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTHandler, java.lang.Object)</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTMethodPattern, java.lang.Object)</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTSet, java.lang.Object)</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTCflow, java.lang.Object)</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTWithinCode, java.lang.Object)</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTCflowBelow, java.lang.Object)</cmethod>
<cmethod>visitAttributes(org.codehaus.aspectwerkz.expression.ast.SimpleNode, org.codehaus.aspectwerkz.reflect.ReflectionInfo)</cmethod>
<cmethod>getASTRoot()</cmethod>
<cmethod>visitParameters(org.codehaus.aspectwerkz.expression.ast.SimpleNode, org.codehaus.aspectwerkz.reflect.ClassInfo[])</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTPointcutReference, java.lang.Object)</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTArgParameter, java.lang.Object)</cmethod>
<cfield>m_namespace</cfield>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTHasField, java.lang.Object)</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTTarget, java.lang.Object)</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTRoot, java.lang.Object)</cmethod>
<cmethod>match(org.codehaus.aspectwerkz.expression.ExpressionContext)</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTConstructorPattern, java.lang.Object)</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.ASTWithin, java.lang.Object)</cmethod>
<cfield>m_root</cfield>
<cmethod>toString()</cmethod>
<cmethod>visit(org.codehaus.aspectwerkz.expression.ast.Node, java.lang.Object)</cmethod>
