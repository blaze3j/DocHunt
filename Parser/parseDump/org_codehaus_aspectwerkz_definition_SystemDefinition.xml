<cmethod>getMixinDefinitions()</cmethod>
<cmethod>getPreparePackages()</cmethod>
<cmethod>getDeploymentScope(java.lang.String)</cmethod>
<cmethod>hasMixin(org.codehaus.aspectwerkz.expression.ExpressionContext)</cmethod>
<cmethod>getAspectDefinition(java.lang.String)</cmethod>
<cmethod>getAspectDefinitions()</cmethod>
<cmethod>addIncludePackage(java.lang.String)</cmethod>
<cmethod>addMixinDefinition(org.codehaus.aspectwerkz.definition.MixinDefinition)</cmethod>
<cmethod>inPreparePackage(java.lang.String)</cmethod>
<cmethod>getMixinDefinitions(org.codehaus.aspectwerkz.expression.ExpressionContext)</cmethod>
<cmethod>inIncludePackage(java.lang.String)</cmethod>
<cmethod>getInterfaceIntroductionDefinitions(org.codehaus.aspectwerkz.expression.ExpressionContext)</cmethod>
<cmethod>hasMixin(org.codehaus.aspectwerkz.expression.ExpressionContext[])</cmethod>
<cmethod>addExcludePackage(java.lang.String)</cmethod>
<cmethod>hashCode()</cmethod>
<cmethod>inExcludePackage(java.lang.String)</cmethod>
<cmethod>addDeploymentScope(org.codehaus.aspectwerkz.definition.DeploymentScope)</cmethod>
<cmethod>isAdvised(org.codehaus.aspectwerkz.expression.ExpressionContext[])</cmethod>
<cmethod>hasPointcut(org.codehaus.aspectwerkz.expression.ExpressionContext)</cmethod>
<cmethod>addAspectOverwriteIfExists(org.codehaus.aspectwerkz.definition.AspectDefinition)</cmethod>
<cmethod>getDeploymentScopes()</cmethod>
<cfield>EMPTY_HASH_MAP</cfield>
<cmethod>hasIntroducedInterface(org.codehaus.aspectwerkz.expression.ExpressionContext)</cmethod>
<cmethod>addPreparePackage(java.lang.String)</cmethod>
<cmethod>getUuid()</cmethod>
<cmethod>addAspect(org.codehaus.aspectwerkz.definition.AspectDefinition)</cmethod>
<cmethod>createVirtualDefinitionAt(java.lang.ClassLoader)</cmethod>
<cmethod>getExcludePackages()</cmethod>
<cmethod>getAdviceDefinitions()</cmethod>
<cmethod>getIncludePackages()</cmethod>
<cmethod>equals(java.lang.Object)</cmethod>
<cmethod>hasIntroducedInterface(org.codehaus.aspectwerkz.expression.ExpressionContext[])</cmethod>
<cmethod>isAdvised(org.codehaus.aspectwerkz.expression.ExpressionContext)</cmethod>
